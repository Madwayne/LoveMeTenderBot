import telebot
import random
import TenderParser as tp
from datetime import datetime
import os

TOKEN = '5243674466:AAEpscGDckjJmf2ZBWW-sGqZcI661fyvHpM'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
STATE_START = 0
STATE_WAIT_FOR_DATE = 1
STATE_WAIT_FOR_KEYWORDS = 2
STATE_END = 3

current_state = STATE_START
input_date = ''
input_keywords = ''

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['getcompliment'])
def get_compliment_processing(message):
    global current_state
    percent = format(random.random() * 1000, '.3f')
    bot.send_message(message.chat.id,
                     f'–¢—ã –≤—ã–≥–ª—è–¥–∏—à—å –Ω–∞ –≤—Å–µ {percent}%! üòçüòçüòç',
                     parse_mode='Markdown')
    current_state = STATE_END


@bot.message_handler(commands=['gettenders'])
def get_tenders_processing(message):
    bot.send_message(message.chat.id,
                     '‚û° –í–≤–µ–¥–∏ *–¥–∞—Ç—É*, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä—ã.\n ‚ùó –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–¥.–º–º.–≥–≥–≥–≥* (–ø—Ä–∏–º–µ—Ä: 01.01.2001)',
                     parse_mode='Markdown')
    global current_state
    current_state = STATE_WAIT_FOR_DATE


@bot.message_handler(func=lambda message: current_state == STATE_WAIT_FOR_DATE)
def enter_date_processing(message):
    global input_date
    input_date = message.text
    try:
        datetime.strptime(input_date, '%d.%m.%Y')
    except:
        bot.send_message(message.chat.id,
                         'ü§¨ –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å-—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É! \n‚Ü© –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ',
                         parse_mode='Markdown')
    else:
        if datetime.strptime(input_date, '%d.%m.%Y').date() > datetime.today().date():
            bot.send_message(message.chat.id,
                             'ü§¨ –í–≤–µ–¥—ë–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π! \n‚Ü© –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ',
                             parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id,
                             '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –ø–æ–∏—Å–∫–æ–≤—É—é —Ñ—Ä–∞–∑—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–∞.',
                             parse_mode='Markdown')
            bot.send_message(message.chat.id,
                             '–¢—ã –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ñ—Ä–∞–∑, —Ä–∞–∑–¥–µ–ª–∏–≤ –∏—Ö —Å–∏–º–≤–æ–ª–æ–º *&* - —è –ø–æ–∏—â—É —Ç–µ–Ω–¥–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö –∏ –≤–µ—Ä–Ω—É –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫',
                             parse_mode='Markdown')
            bot.send_message(message.chat.id,
                             '–ü—Ä–∏–º–µ—Ä: –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω*&*–ø—Ä–æ–µ–∫—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏*&*–∫–æ–Ω—Ü–µ–ø—Ü–∏—è',
                             parse_mode='Markdown')
            global current_state
            current_state = STATE_WAIT_FOR_KEYWORDS


@bot.message_handler(func=lambda message: current_state == STATE_WAIT_FOR_KEYWORDS)
def enter_keywords_processing(message):
    global input_keywords
    global current_state
    input_phrases = message.text.split('&')
    keywords_count = len(input_phrases)
    bot.send_message(message.chat.id,
                     f'‚úÖ –¢–∞–∫, –≤–≤–µ–¥–µ–Ω–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ñ—Ä–∞–∑: *{keywords_count}*.\n –°–µ–π—á–∞—Å –ø–æ–∏—â—É —á—Ç–æ-–Ω–∏—É–¥—å, —Ç–µ—Ä–ø–µ–Ω–∏–µ... ‚è±',
                     parse_mode='Markdown')
    tenders_list_html = tp.get_tenders_list(input_date, input_phrases)
    if len(tenders_list_html) == 0:
        bot.send_message(message.chat.id,
                         f'‚õî –ö–æ—Å—è–∫ (–∫–æ–¥ 1): —Å–∞–π—Ç {tp.SITE_URL} –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤.\n –£–∫–∞–∂–∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞',
                         parse_mode='Markdown')
        current_state = STATE_END
    else:
        bot.send_message(message.chat.id,
                         f'üî• –û—Ç–ª–∏—á–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤: *{len(tenders_list_html)}*.\n –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª... ‚è±',
                         parse_mode='Markdown')
        tenders_df = tp.set_tenders_to_df(tenders_list_html)
        result_filename = tp.export_tenders_to_xls(tenders_df)
        if result_filename == '':
            bot.send_message(message.chat.id,
                             '‚õî –ö–æ—Å—è–∫ (–∫–æ–¥ 2): –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª',
                             parse_mode='Markdown')
            current_state = STATE_END
        else:
            doc_to_send = open(result_filename, 'rb')
            bot.send_message(message.chat.id,
                             f'–í–æ—Ç —Ç–≤–æ–π —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–Ω–¥–µ—Ä–æ–≤:',
                             parse_mode='Markdown')
            bot.send_document(message.chat.id, doc_to_send)
            doc_to_send.close()
            os.remove(result_filename)
    current_state = STATE_END


@bot.message_handler(func=lambda message: current_state == STATE_END)
def end_state_processing(message):
    bot.send_message(message.chat.id,
                     f'–¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥: /getcompliment –∏–ª–∏ /gettenders',
                     parse_mode='Markdown')


bot.polling(none_stop=True)
